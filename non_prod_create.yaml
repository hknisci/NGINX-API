- name: --- [Task] Decode base64 upstream block ---
  become: true
  become_method: dzdo
  become_user: www
  shell:
    echo "{{ location_append }}" | base64 -d
  register: decoded_location

### TODO:
### Eğer ilk kez bir {{ api }} için dosya oluşturuyorsa dosyayı oluştaracağız
### Eğer mevcut bir {{ api }} için tekrar istek geldiyse mevcut dosya üç versiyona kadar filesystem üzerinde yedeklenmeli
### Yapmamız gereken yapılan talepteki {{ api }} var mı yok mu?
### Yok ise aşağıdaki task ok'dir.
### Var ise adam API'sinde güncelleme yapmak istiyordur
### O yüzden /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf dosyası yedeklenmeli ve ezmek için yine aşadağıki task kullanılabilir.
### Yedek sayısı 3 olsun
- name: --- [Task] Insert new application's configuration block ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.copy:
    content: "{{ decoded_location.stdout }}"
    dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
    mode: 0644
    owner: www
    group: was

### TODO: Eğer mevcuttaki bir {{ api_path }} için period/rate ayarları değişecekse mevcut satır update edilmeli
- name: --- [Task] Insert new application's limit zone line ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.lineinfile:
    path: /usr/nginx/conf.d/limit-zones.conf
    line: "limit_req_zone $binary_remote_addr zone={{ api_path }}_rate_limit:{{ limit_req_zone_period }} rate={{ limit_req_zone_rate }};"
    mode: 0644
    owner: www
    group: was
    create: yes

- name: --- [Task] Reload Nginx ---
  become: true
  become_method: dzdo
  become_user: www
  shell: |
    /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -e /web_log/error.log -s reload

#- name: --- [Task] Check API existence ---
#  ansible.builtin.stat:
#    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
#  register: api_existence
#
#- name: --- [Task] Insert new application's configuration block for channels ---
#  become: true
#  become_method: dzdo
#  become_user: www
#  ansible.builtin.blockinfile:
#    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
#    block: "{{ decoded_location.stdout }}"
#    create: yes
#  when: not api_existence.stat.exist
#
#- name: --- [Task] Replace ansible markers begin ---
#  become: true
#  become_method: dzdo
#  become_user: www    
#  ansible.builtin.replace:
#    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
#    regexp: '# BEGIN ANSIBLE MANAGED BLOCK'
#    replace: ''
#  when: not api_existence.stat.exist
#
#- name: --- [Task] Replace ansible markers end ---
#  become: true
#  become_method: dzdo
#  become_user: www    
#  ansible.builtin.replace:
#    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
#    regexp: '# END ANSIBLE MANAGED BLOCK'
#    replace: ''
#  when: api_existence.stat.exist
#
#- name: --- [Task] Remove file ---
#  ansible.builtin.file:
#    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
#    state: absent
#  when: api_existence.stat.exist
#  
#- name: --- [Task] Insert new application's configuration block for channels ---
#  become: true
#  become_method: dzdo
#  become_user: www
#  ansible.builtin.blockinfile:
#    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
#    block: "{{ decoded_location.stdout }}"
#  when: api_existence.stat.exist



- name: --- [Task] Decode base64 upstream block ---
  become: true
  become_method: dzdo
  become_user: www
  shell:
    echo "{{ location_append }}" | base64 -d
  register: decoded_location

### TODO:
### Eğer ilk kez bir {{ api }} için dosya oluşturuyorsa dosyayı oluştaracağız
### Eğer mevcut bir {{ api }} için tekrar istek geldiyse mevcut dosya üç versiyona kadar filesystem üzerinde yedeklenmeli
### Yapmamız gereken yapılan talepteki {{ api }} var mı yok mu?
### Yok ise aşağıdaki task ok'dir.
### Var ise adam API'sında güncelleme yapmak istiyordur
### O yüzden /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf dosyası yedeklenmeli ve ezmek için yine aşadağıki task kullanılabilir.
### Yedek sayısı 3 olsun

# API dosyasının varlığını kontrol et
- name: --- [Task] Check if API configuration exists ---
  ansible.builtin.stat:
    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
  register: api_file_status

# Mevcut dosyanın yedeklerini kontrol et ve say
- name: --- [Task] Find existing backup files ---
  ansible.builtin.find:
    paths: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/
    patterns: "{{ api }}.conf.backup.*"
  register: backup_files
  when: api_file_status.stat.exists

# En eski yedeği sil (3'ten fazla varsa)
- name: --- [Task] Remove oldest backup if more than 3 exist ---
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ (backup_files.files | sort(attribute='mtime') | list)[:-3] }}"
  when: 
    - api_file_status.stat.exists
    - backup_files.files is defined
    - backup_files.files | length >= 3

# Mevcut dosyayı yedekle (varsa)
- name: --- [Task] Backup existing API configuration ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.copy:
    src: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
    dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf.backup.{{ ansible_date_time.epoch }}
    remote_src: yes
    mode: 0644
    owner: www
    group: was
  when: api_file_status.stat.exists

# Yeni veya güncellenmiş konfigürasyonu yaz
- name: --- [Task] Insert new application's configuration block ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.copy:
    content: "{{ decoded_location.stdout }}"
    dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
    mode: 0644
    owner: www
    group: was

### TODO: Eğer mevcuttaki bir {{ api_path }} için period/rate ayarları değişecekse mevcut satır update edilmeli

# Rate limit konfigürasyonunun mevcut halini oku
- name: --- [Task] Check existing rate limit configuration ---
  ansible.builtin.lineinfile:
    path: /usr/nginx/conf.d/limit-zones.conf
    regexp: '^limit_req_zone \$binary_remote_addr zone={{ api_path }}_rate_limit:.*'
    state: absent
  check_mode: yes
  register: rate_limit_check

# Mevcut rate limit satırını logla (değişiklik takibi için)
- name: --- [Task] Log rate limit change if exists ---
  ansible.builtin.debug:
    msg: "Updating existing rate limit for {{ api_path }}: Previous configuration will be replaced"
  when: rate_limit_check.found

# Rate limit konfigürasyonunu ekle veya güncelle
- name: --- [Task] Insert or update application's limit zone line ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.lineinfile:
    path: /usr/nginx/conf.d/limit-zones.conf
    regexp: '^limit_req_zone \$binary_remote_addr zone={{ api_path }}_rate_limit:.*'
    line: "limit_req_zone $binary_remote_addr zone={{ api_path }}_rate_limit:{{ limit_req_zone_period }} rate={{ limit_req_zone_rate }};"
    mode: 0644
    owner: www
    group: was
    create: yes

# Nginx konfigürasyonunu test et
- name: --- [Task] Test Nginx configuration ---
  become: true
  become_method: dzdo
  become_user: www
  shell: |
    /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -t
  register: nginx_test
  ignore_errors: yes

# Test başarısızsa geri al
- name: --- [Task] Rollback configuration if test fails ---
  block:
    - name: --- [Task] Restore backup configuration ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.copy:
        src: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf.backup.{{ ansible_date_time.epoch }}
        dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
        remote_src: yes
        mode: 0644
        owner: www
        group: was
    
    - name: --- [Task] Fail with error message ---
      ansible.builtin.fail:
        msg: "Nginx configuration test failed. Configuration has been rolled back."
  when: 
    - nginx_test.rc != 0
    - api_file_status.stat.exists

# Test başarılıysa Nginx'i reload et
- name: --- [Task] Reload Nginx ---
  become: true
  become_method: dzdo
  become_user: www
  shell: |
    /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -e /web_log/error.log -s reload
  when: nginx_test.rc == 0

# Başarılı deployment mesajı
- name: --- [Task] Display deployment status ---
  ansible.builtin.debug:
    msg: 
      - "API Configuration Status:"
      - "  API: {{ api }}"
      - "  Environment: {{ env }}"
      - "  Channel: {{ channel }}"
      - "  Configuration: {{ 'Updated' if api_file_status.stat.exists else 'Created' }}"
      - "  Rate Limit: {{ limit_req_zone_rate }} (Period: {{ limit_req_zone_period }})"










      - name: --- [Task] Decode base64 upstream block ---
  become: true
  become_method: dzdo
  become_user: www
  shell:
    echo "{{ location_append }}" | base64 -d
  register: decoded_location

### TODO:
### Eğer ilk kez bir {{ api }} için dosya oluşturuyorsa dosyayı oluştaracağız
### Eğer mevcut bir {{ api }} için tekrar istek geldiyse mevcut dosya üç versiyona kadar filesystem üzerinde yedeklenmeli
### Yapmamız gereken yapılan talepteki {{ api }} var mı yok mu?
### Yok ise aşağıdaki task ok'dir.
### Var ise adam API'sinde güncelleme yapmak istiyordur
### O yüzden /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf dosyası yedeklenmeli ve ezmek için yine aşadağıki task kullanılabilir.
### Yedek sayısı 3 olsun

# TODO SECTION 1: API dosya yönetimi ve yedekleme
- name: --- [Task] Check if API configuration file exists ---
  ansible.builtin.stat:
    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
  register: api_config_exists

- name: --- [Task] Get list of existing backup files ---
  ansible.builtin.find:
    paths: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/
    patterns: "{{ api }}.conf.backup.*"
    use_regex: no
  register: existing_backups
  when: api_config_exists.stat.exists

- name: --- [Task] Remove oldest backups if more than 2 exist (to keep max 3) ---
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ (existing_backups.files | sort(attribute='mtime'))[:-2] }}"
  when: 
    - api_config_exists.stat.exists
    - existing_backups.files is defined
    - (existing_backups.files | length) >= 3
  become: true
  become_method: dzdo
  become_user: www

- name: --- [Task] Create backup of existing configuration ---
  ansible.builtin.copy:
    src: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
    dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf.backup.{{ ansible_date_time.epoch }}
    remote_src: yes
    mode: 0644
    owner: www
    group: was
  when: api_config_exists.stat.exists
  become: true
  become_method: dzdo
  become_user: www

- name: --- [Task] Insert new application's configuration block ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.copy:
    content: "{{ decoded_location.stdout }}"
    dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
    mode: 0644
    owner: www
    group: was

### TODO: Eğer mevcuttaki bir {{ api_path }} için period/rate ayarları değişecekse mevcut satır update edilmeli

# TODO SECTION 2: Rate limit güncelleme
- name: --- [Task] Check if rate limit for api_path already exists ---
  ansible.builtin.lineinfile:
    path: /usr/nginx/conf.d/limit-zones.conf
    regexp: '^limit_req_zone \$binary_remote_addr zone={{ api_path }}_rate_limit:'
    state: absent
  check_mode: yes
  register: rate_limit_exists
  become: true
  become_method: dzdo
  become_user: www

- name: --- [Task] Log if updating existing rate limit ---
  ansible.builtin.debug:
    msg: "Rate limit for {{ api_path }} exists and will be updated with new values - period: {{ limit_req_zone_period }}, rate: {{ limit_req_zone_rate }}"
  when: rate_limit_exists.found

- name: --- [Task] Insert new application's limit zone line ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.lineinfile:
    path: /usr/nginx/conf.d/limit-zones.conf
    regexp: '^limit_req_zone \$binary_remote_addr zone={{ api_path }}_rate_limit:.*$'
    line: "limit_req_zone $binary_remote_addr zone={{ api_path }}_rate_limit:{{ limit_req_zone_period }} rate={{ limit_req_zone_rate }};"
    mode: 0644
    owner: www
    group: was
    create: yes

- name: --- [Task] Reload Nginx ---
  become: true
  become_method: dzdo
  become_user: www
  shell: |
    /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -e /web_log/error.log -s reload










