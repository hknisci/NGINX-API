- name: --- [Task] Decode base64 upstream block ---
  become: true
  become_method: dzdo
  become_user: www
  shell:
    echo "{{ location_append }}" | base64 -d
  register: decoded_location

### TODO:
### Eğer ilk kez bir {{ api }} için dosya oluşturuyorsa dosyayı oluştaracağız
### Eğer mevcut bir {{ api }} için tekrar istek geldiyse mevcut dosya üç versiyona kadar filesystem üzerinde yedeklenmeli
### Yapmamız gereken yapılan talepteki {{ api }} var mı yok mu?
### Yok ise aşağıdaki task ok'dir.
### Var ise adam API'sinde güncelleme yapmak istiyordur
### O yüzden /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf dosyası yedeklenmeli ve ezmek için yine aşadağıki task kullanılabilir.
### Yedek sayısı 3 olsun

# API dosyasının varlığını kontrol et
- name: --- [Task] Check if API configuration exists ---
  ansible.builtin.stat:
    path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
  register: api_file_status

# Mevcut dosyanın yedeklerini kontrol et ve say
- name: --- [Task] Find existing backup files ---
  ansible.builtin.find:
    paths: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/
    patterns: "{{ api }}.conf.backup.*"
  register: backup_files
  when: api_file_status.stat.exists

# En eski yedeği sil (3'ten fazla varsa)
- name: --- [Task] Remove oldest backup if more than 3 exist ---
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ (backup_files.files | sort(attribute='mtime') | list)[:-3] }}"
  when: 
    - api_file_status.stat.exists
    - backup_files.files is defined
    - backup_files.files | length >= 3

- name: --- [Task] Get current timestamp ---
  ansible.builtin.command: date +%s
  register: timestamp
  changed_when: false

# Mevcut dosyayı yedekle (varsa)
- name: --- [Task] Backup existing API configuration ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.copy:
    src: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
    dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf.backup.{{ timestamp.stdout }}
    remote_src: yes
    mode: 0644
    owner: www
    group: was
  when: api_file_status.stat.exists

# Yeni veya güncellenmiş konfigürasyonu yaz
- name: --- [Task] Insert new application's configuration block ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.copy:
    content: "{{ decoded_location.stdout }}"
    dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
    mode: 0644
    owner: www
    group: was

### TODO: Eğer mevcuttaki bir {{ limit_req_zone_name }} için period/rate ayarları değişecekse mevcut satır update edilmeli

# Rate limit konfigürasyonunu ekle veya güncelle
# Not: lineinfile regexp parametresi ile zaten mevcut satırı bulup güncelliyor
- name: --- [Task] Insert or update application's limit zone line ---
  become: true
  become_method: dzdo
  become_user: www
  ansible.builtin.lineinfile:
    path: /usr/nginx/conf.d/limit-zones.conf
    regexp: '^limit_req_zone \$binary_remote_addr zone={{ limit_req_zone_name }}_rate_limit:.*'
    line: "limit_req_zone $binary_remote_addr zone={{ limit_req_zone_name }}_rate_limit:{{ limit_req_zone_memory_size }} rate={{ limit_req_zone_rate }};"
    mode: 0644
    owner: www
    group: was
    create: yes
  register: rate_limit_result

# Değişiklik olduysa logla
- name: --- [Task] Log rate limit change ---
  ansible.builtin.debug:
    msg: 
      - "Rate limit configuration: {{ 'Updated' if rate_limit_result.changed else 'No change needed' }}"
      - "Zone: {{ limit_req_zone_name }}_rate_limit"
      - "Memory: {{ limit_req_zone_memory_size }}"
      - "Rate: {{ limit_req_zone_rate }}"

# Nginx konfigürasyonunu test et
- name: --- [Task] Test Nginx configuration ---
  become: true
  become_method: dzdo
  become_user: www
  shell: |
    /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -e /web_log/error.log -t
  register: nginx_test
  ignore_errors: yes

# Test başarısız ise - MEVCUT API için geri al
- name: --- [Task] Rollback existing API configuration if test fails ---
  block:
    - name: --- [Task] Restore backup configuration ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.copy:
        src: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf.backup.{{ timestamp.stdout }}
        dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
        remote_src: yes
        mode: 0644
        owner: www
        group: was
    
    - name: --- [Task] Remove failed rate limit entry ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.lineinfile:
        path: /usr/nginx/conf.d/limit-zones.conf
        regexp: '^limit_req_zone \$binary_remote_addr zone={{ limit_req_zone_name }}_rate_limit:.*'
        state: absent
      when: rate_limit_result.changed
    
    - name: --- [Task] Fail with error message for existing API ---
      ansible.builtin.fail:
        msg: "Nginx configuration test failed for existing API. Configuration has been rolled back to previous version."
  when: 
    - nginx_test.rc != 0
    - api_file_status.stat.exists

# Test başarısız ise - YENİ API için temizle
- name: --- [Task] Remove new API configuration if test fails ---
  block:
    - name: --- [Task] Remove failed new configuration file ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.file:
        path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
        state: absent
    
    - name: --- [Task] Remove rate limit entry for failed new API ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.lineinfile:
        path: /usr/nginx/conf.d/limit-zones.conf
        regexp: '^limit_req_zone \$binary_remote_addr zone={{ limit_req_zone_name }}_rate_limit:.*'
        state: absent
    
    - name: --- [Task] Fail with error message for new API ---
      ansible.builtin.fail:
        msg: "Nginx configuration test failed for new API. Configuration file and rate limit entry have been removed."
  when: 
    - nginx_test.rc != 0
    - not api_file_status.stat.exists

# Test başarılıysa Nginx'i reload et
- name: --- [Task] Reload Nginx ---
  become: true
  become_method: dzdo
  become_user: www
  shell: |
    /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -e /web_log/error.log -s reload
  register: nginx_reload
  when: nginx_test.rc == 0

# Reload başarısız ise - MEVCUT API için geri al
- name: --- [Task] Rollback if reload fails for existing API ---
  block:
    - name: --- [Task] Restore backup after failed reload ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.copy:
        src: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf.backup.{{ timestamp.stdout }}
        dest: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
        remote_src: yes
        mode: 0644
        owner: www
        group: was
    
    - name: --- [Task] Remove failed rate limit if it was added ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.lineinfile:
        path: /usr/nginx/conf.d/limit-zones.conf
        regexp: '^limit_req_zone \$binary_remote_addr zone={{ limit_req_zone_name }}_rate_limit:.*'
        state: absent
      when: rate_limit_result.changed
    
    - name: --- [Task] Force reload with restored configuration ---
      become: true
      become_method: dzdo
      become_user: www
      shell: |
        /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -e /web_log/error.log -s reload
    
    - name: --- [Task] Fail with reload error for existing API ---
      ansible.builtin.fail:
        msg: "Nginx reload failed after configuration update. Previous configuration has been restored."
  when:
    - nginx_test.rc == 0
    - nginx_reload.rc != 0
    - api_file_status.stat.exists

# Reload başarısız ise - YENİ API için temizle
- name: --- [Task] Clean up if reload fails for new API ---
  block:
    - name: --- [Task] Remove new configuration after failed reload ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.file:
        path: /usr/nginx/conf.d/{{ channel }}-{{ env }}-apis/{{ api }}.conf
        state: absent
    
    - name: --- [Task] Remove rate limit for failed new API ---
      become: true
      become_method: dzdo
      become_user: www
      ansible.builtin.lineinfile:
        path: /usr/nginx/conf.d/limit-zones.conf
        regexp: '^limit_req_zone \$binary_remote_addr zone={{ limit_req_zone_name }}_rate_limit:.*'
        state: absent
    
    - name: --- [Task] Force reload after cleanup ---
      become: true
      become_method: dzdo
      become_user: www
      shell: |
        /usr/nginx/sbin/nginx -p /usr/nginx/ -c /usr/nginx/nginx.conf -e /web_log/error.log -s reload
    
    - name: --- [Task] Fail with reload error for new API ---
      ansible.builtin.fail:
        msg: "Nginx reload failed for new API configuration. Configuration file and rate limit have been removed."
  when:
    - nginx_test.rc == 0
    - nginx_reload.rc != 0
    - not api_file_status.stat.exists

# Başarılı deployment mesajı
- name: --- [Task] Display deployment status ---
  ansible.builtin.debug:
    msg: 
      - "API Configuration Status: SUCCESS"
      - "  API: {{ api }}"
      - "  Environment: {{ env }}"
      - "  Channel: {{ channel }}"
      - "  Configuration: {{ 'Updated' if api_file_status.stat.exists else 'Created' }}"
      - "  Rate Limit: {{ limit_req_zone_rate }} (Memory: {{ limit_req_zone_memory_size }})"
  when: 
    - nginx_test.rc == 0
    - nginx_reload.rc == 0
